<div id="galleryIframe">
  <div style="padding: 12px;">
    <style>
  
      .imagesGallery {
        border-left: 1px solid lightgray;
        border-top: 1px solid lightgray;
      }
  
      .image {
        position: relative;
        width: 100%;
        padding-bottom: 100%;
        background-size: cover;
        background-position: center;
        border-right: 1px solid lightgray;
        border-bottom: 1px solid lightgray;
      }
  
      .imagesGallery .image button.edit {
        display: none;
        position: absolute;
        bottom: 20px;
        left: 20px;
      }
  
      .imagesGallery .image .checked {
        display: none;
        position: absolute;
        top: 4px;
        right: 4px;
        background-color: deepskyblue;
        width: 30px;
        height: 30px;
        border-radius: 50%;
      }
  
      .imagesGallery.editMode .image button.edit,
      .imagesGallery .image.selected .checked {
        display: block;
      }
  
    </style>
    <div style="display: flex; flex-direction: column;">
      <header>
        <div style="display: flex; align-items: center;">
          <h2 style="flex-grow: 1;"><button type="button" onclick="closeGallery()">X</button>  Image Gallery</h2>
          <input type="checkbox" onchange="toggleEditMode(event)" id="edit"><label for="edit">Delete mode</label>
          <input type="file" name="image" id="imageUpload" style="display: none;" onchange="uploadImage(event)"/>
        </div>
      </header>
      <div class="imagesGallery row" style="flex-grow: 1; margin-left: 0; margin-right: 0;">
        <div class="col-lg-2 col-md-3 col-4 uploadNew" style="padding-left: 0; padding-right: 0;">
          <div class="image" onclick="$('#imageUpload').click()">
            <div style="position: absolute; top: 0; bottom: 0; right: 0; left: 0; display: flex; align-items: center; justify-content: center;">
              Click to upload a new image
            </div>
          </div>
        </div>
      </div>
      <footer>
        <button class="primary" type="button" onclick="returnSelection()">Select</button>
      </footer>
    </div>
  </div>
</div>
<div class="selectedImages" id="sortable">

</div>
<button class="secondary" onclick="loadGallery()">
  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-camera2" viewBox="0 0 16 16">
    <path d="M5 8c0-1.657 2.343-3 4-3V4a4 4 0 0 0-4 4z"/>
    <path d="M12.318 3h2.015C15.253 3 16 3.746 16 4.667v6.666c0 .92-.746 1.667-1.667 1.667h-2.015A5.97 5.97 0 0 1 9 14a5.972 5.972 0 0 1-3.318-1H1.667C.747 13 0 12.254 0 11.333V4.667C0 3.747.746 3 1.667 3H2a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1h.682A5.97 5.97 0 0 1 9 2c1.227 0 2.367.368 3.318 1zM2 4.5a.5.5 0 1 0-1 0 .5.5 0 0 0 1 0zM14 8A5 5 0 1 0 4 8a5 5 0 0 0 10 0z"/>
  </svg>
  Pick images
</button>

<script>
  function returnSelection() {
    // Convert the index to a list and returns only the images that are selected
    selectedImages(Object.values(imageIndex).filter(imageIndexRecord => imageIndexRecord.selected).map(imageIndexRecord => imageIndexRecord.image))
  }

  function appendImage(image, selected) {
    const newElem = $(`
      <div class="col-lg-2 col-md-3 col-4" style="padding-left: 0; padding-right: 0;">
        <div 
          data-image-id="${image.id}"
          class="image ${selected? 'selected' : ''}" 
          onclick="toggleImageSelection(event)"
          style="background-image: url('${image.src}');"
        >
          <div class="checked"></div>
        </div>
      </div>`).insertAfter('.imagesGallery .uploadNew')
  }
  
  function load(preselectedProdutcIds) {
    fetch('/gallery', {
      method: 'GET'
    })
      .then((response) => {
        return response.json()
      })
      .then(body => {
        if (body.success) {
          body.images.forEach(image => {
            const isSelected = preselectedProdutcIds.includes(image.id)
            imageIndex[image.id] = {
              selected: isSelected,
              image
            }
            appendImage(image, isSelected)
          })
        } else {
          if (body.error) {
            alert(body.message || 'There was an error uploading the image')
            console.log('There was an error')
          }
        }
      })
      .catch(function(error) {
        alert('Ups! There was an error uploading the image')
        console.log(error)
      })
  }

  function toggleImageSelection(event) {
    if (!editMode) {
      const imageId = $(event.target).data('image-id')
      if (!imageIndex[imageId].selected) {
        imageIndex[imageId].selected = true
        $(event.target).addClass('selected')
      } else {
        imageIndex[imageId].selected = false
        $(event.target).removeClass('selected')
      }
    } else {
      // TODO: take me to image edition panel
      deleteImage(event)
    }
  }

  function toggleEditMode(event) {
    editMode = $(event.target).prop('checked')
    if (editMode) {
      $('.imagesGallery').addClass('editMode')
    } else {
      $('.imagesGallery').removeClass('editMode')
    }
  }

  function editImage(event) {
    alert('Not yet implemented!')
  }

  function deleteImage(event) {
    const imageId = $(event.target).data('image-id')
    fetch(`/gallery/${imageId}?_csrf=<%= csrfToken %>`, {
      method: 'DELETE',
      credentials: 'same-origin'
    })
    .then((response) => {
      return response.json()
    })
    .then(body => {
      $(event.target).parent().remove()
      delete imageIndex[imageId]
      removeImageIfSelected(imageId)
    })
    .catch(function(error) {
      alert('Ups! There was an error deleting the image')
      console.log(error)
    })
  }

  function uploadImage(event) {
    const fileInput = event.target;
    const formData = new FormData();
    formData.append('image', fileInput.files[0]);
    fetch('/gallery?_csrf=<%= csrfToken %>', {
      method: 'POST',
      body: formData
    })
      .then((response) => {
        return response.json()
      })
      .then(body => {
        if (body.success) {
          let image = body.image
          imageIndex[image.id] = {
            selected: true,
            image
          }
          appendImage(image, true)
        } else {
          if (body.error) {
            alert(body.message || 'There was an error uploading the image')
            console.log('There was an error')
          }
        }
      })
      .catch(function(error) {
        alert('Ups! There was an error uploading the image')
        console.log(error)
      })
  }

  function closeGallery() {
  $('#galleryIframe').hide();
  }

  function removeImageIfSelected(imageId) {
  $(`.selectedImages .image-preview[data-image-id='${imageId}']`).remove()
  }

  function selectedImages(images) {
    closeGallery()
    console.log(images)
    $('.selectedImages').empty()
    images.forEach(image => {
      $(`<div class="image-preview" data-image-id="${image.id}" style="background-image: url('${image.src}')">
          <input type="hidden" name="images" value="${image.id}">
        </div>`).appendTo('.selectedImages')
    })
    $( "#sortable" ).sortable();
  }

  function loadGallery() {
    if (!galleryLoaded) {
      load(initialImages.map(image => image.id))
      galleryLoaded = true
    }
    $('#galleryIframe').show()
  }

  function remove() {
    alert('Clicked!')
  }

  function readURL(input) {
    $('.previews').empty()
    if (input.files) {
      for (var fileIter of input.files)
        (function(file) {
          var reader = new FileReader();
          reader.onload = function (e) {
          var img = $('<img />', {
          src: e.target.result, 
          width: 180
          }).click(remove)
            .appendTo($('.previews'));
          };

          reader.readAsDataURL(fileIter);
        })(fileIter)
    }
  }

  const urlParams = new URLSearchParams(window.location.search)
  preselectedProdutcIds = urlParams.get('selected')?.split(',') || []

  var editMode = false

  const imageIndex = {}

  // Image gallery
  let galleryLoaded = false

  const initialImages = <%- JSON.stringify(product?.images || []) %>;

  $(() => {
    selectedImages(initialImages)
  })
</script>